name: Build und Release Star Citizen Griefing Counter

on:
  push:
    tags:
      - 'v*' # Wird ausgelöst, wenn ein Tag mit 'v' beginnt (z.B. v1.0.0)
  workflow_dispatch: # Ermöglicht manuelles Auslösen

# Berechtigungen für den Workflow explizit setzen
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      # Wir verwenden die checkout-Action, die immer erlaubt ist
      - uses: actions/checkout@v3
      
      - name: Debug Info
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
      
      # Wir verwenden setup-python, die immer erlaubt ist
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka pyarmor requests packaging
          pip install watchdog tkcalendar
      
      - name: Extract Version from Tag
        id: get_version
        shell: pwsh
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/v")) {
            $version = "${{ github.ref }}".Replace('refs/tags/v', '')
          } else {
            $version = "0.7.0"  # Fallback-Version
          }
          # Speichere Version als Output-Variable
          echo "app_version=$version" >> $env:GITHUB_OUTPUT
          # Zeige Version im Log
          echo "Extrahierte Version: $version"
          
      - name: Debug Version Variable
        run: |
          echo "VERSION: ${{ steps.get_version.outputs.app_version }}"
          echo "GITHUB_REF: ${{ github.ref }}"
      
      - name: Create version.json
        id: create_version_json
        shell: pwsh
        run: |
          # Verwende die Version aus dem vorherigen Schritt
          $versionNum = "${{ steps.get_version.outputs.app_version }}"
          $versionJson = @{
            latest_version = $versionNum
            download_url = "https://${{ github.repository_owner }}.github.io/SC-Griefing-Counter-Releases/griefing_counter.exe"
            release_date = (Get-Date -Format "yyyy-MM-dd")
            changelog = "Neue Version $versionNum verfügbar. Siehe GitHub für Details."
          } | ConvertTo-Json
          $versionJson | Out-File -FilePath version.json -Encoding utf8
          Get-Content version.json
      
      - name: Apply PyArmor to Main Script
        run: |
          mkdir -p dist/obfuscated
          pyarmor obfuscate --restrict 0 --output dist/obfuscated griefing_counter_tk.py
          xcopy /E /Y *.py dist\obfuscated\
          del dist\obfuscated\griefing_counter_tk.py
          copy dist\obfuscated\pytransform\__init__.py dist\obfuscated\
          rmdir /S /Q dist\obfuscated\pytransform
      
      - name: Compile Main Program with Nuitka
        run: |
          python -m nuitka --standalone --mingw64 --plugin-enable=tk-inter --windows-disable-console --include-package=tkinter --include-package=tkcalendar --output-dir=dist dist/obfuscated/griefing_counter_tk.py
          Rename-Item -Path "dist/griefing_counter_tk.dist" -NewName "griefing_counter"
          Rename-Item -Path "dist/griefing_counter/griefing_counter_tk.exe" -NewName "griefing_counter.exe"
      
      - name: Compile Updater with Nuitka
        run: |
          python -m nuitka --standalone --mingw64 --windows-disable-console --output-dir=dist gc-updater.py
      
      - name: Generate SHA256 Hash
        shell: pwsh
        run: |
          $exePath = "dist/griefing_counter/griefing_counter.exe"
          $hash = (Get-FileHash -Path $exePath -Algorithm SHA256).Hash.ToLower()
          $hash | Out-File -FilePath "dist/griefing_counter.exe.sha256" -Encoding utf8 -NoNewline
      
      - name: Copy Additional Files to Distribution
        run: |
          copy README.md dist\griefing_counter\
          copy LICENSE.txt dist\griefing_counter\
          copy CONTRIBUTING.md dist\griefing_counter\
          copy version.json dist\griefing_counter\
          copy dist\gc-updater.dist\gc-updater.exe dist\griefing_counter\
      
      - name: Create Release ZIP
        id: create_zip
        shell: pwsh
        run: |
          # Hole die Version aus dem get_version-Schritt
          $versionNum = "${{ steps.get_version.outputs.app_version }}"
          # Erstelle den ZIP-Dateinamen
          $zipFilename = "SC-Griefing-Counter-" + $versionNum + ".zip"
          # Erstelle die ZIP-Datei
          Compress-Archive -Path dist/griefing_counter/* -DestinationPath $zipFilename
          # Speichere den Dateinamen als Output
          echo "zip_filename=$zipFilename" >> $env:GITHUB_OUTPUT
      
      # GitHub Release erstellen
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.create_zip.outputs.zip_filename }}
            dist/griefing_counter.exe.sha256
            version.json
          name: SC Griefing Counter v${{ steps.get_version.outputs.app_version }}
          body: |
            # Release v${{ steps.get_version.outputs.app_version }}
            
            ## Änderungen
            - Automatisierter Build-Prozess
            - Updates können direkt in der App installiert werden
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # GitHub Pages Setup
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v2
        with:
          path: dist/griefing_counter
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2