
name: Build und Release SC Griefing Counter

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  id-token: write

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.3.0
          pip install -r requirements.txt

      - name: Build Backend (PyInstaller)
        run: |
          pyinstaller --onefile --name griefing_counter_api main.py

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Build Frontend (React)
        run: |
          cd frontend
          npm run build

      - name: Build Electron App (Windows & Linux)
        run: |
          cd frontend
          npx electron-builder --win --linux

      - name: Copy Artifacts
        run: |
          mkdir -p dist/release
          cp dist/griefing_counter_api.exe dist/release/ || echo "No backend exe"
          cp frontend/dist/*.exe dist/release/ || echo "No electron exe"
          cp frontend/dist/*.AppImage dist/release/ || echo "No AppImage"
          cp frontend/dist/*.deb dist/release/ || echo "No deb"
          cp frontend/dist/*.zip dist/release/ || echo "No zip"

      - name: Extract Version from Tag
        id: get_version
        shell: pwsh
        run: |
          if ("${{ github.ref }}" -match "refs/tags/v(.+)") {
            $version = $matches[1]
          } else {
            $version = "0.8.0"
          }
          "app_version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "Version: $version"

      - name: Extract Changelog for Current Version
        id: extract_changelog
        shell: pwsh
        run: |
          $version = "${{ steps.get_version.outputs.app_version }}"
          $changelogContent = Get-Content -Path "CHANGELOG.md" -Raw
          $pattern = "(?s)## \[$version\].*?(## \[|$)"
          if ($changelogContent -match $pattern) {
            $versionChangelog = $matches[0]
            $versionChangelog = $versionChangelog -replace "## \[(?!\$version\]).*$", ""
            $versionChangelog = $versionChangelog.Trim()
            "changelog<<_CHANGELOG_DELIMITER_" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            $versionChangelog | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            "_CHANGELOG_DELIMITER_" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
            Write-Host "Changelog für Version $version gefunden und extrahiert"
          } else {
            Write-Host "No Changelog-Entries for this version $version found"
            "changelog=No detailed Change found" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/release/*
          name: SC Griefing Counter v${{ steps.get_version.outputs.app_version }}
          body: |
            # Release v${{ steps.get_version.outputs.app_version }}
            
            ## Changes
            ${{ steps.extract_changelog.outputs.changelog }}
            
            ## Downloads
            - **Windows Installer:** (siehe unten)
            - **Linux AppImage/Deb:** (siehe unten)
            - **Backend Standalone:** (siehe unten)
            - **Quellcode:** Automatisch von GitHub bereitgestellt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Backend Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller==6.3.0
          pip install -r requirements.txt

      - name: Build Backend (PyInstaller)
        run: |
          pyinstaller --onefile --name griefing_counter_api main.py

      - name: Install Frontend Dependencies
        run: |
          cd frontend
          npm install

      - name: Build Frontend (React)
        run: |
          cd frontend
          npm run build

      - name: Build Electron App (Linux)
        run: |
          cd frontend
          npx electron-builder --linux

      - name: Copy Artifacts
        run: |
          mkdir -p dist/release
          cp dist/griefing_counter_api dist/release/ || echo "No backend bin"
          cp frontend/dist/*.AppImage dist/release/ || echo "No AppImage"
          cp frontend/dist/*.deb dist/release/ || echo "No deb"
          cp frontend/dist/*.zip dist/release/ || echo "No zip"

      - name: Extract Version from Tag
        id: get_version
        shell: bash
        run: |
          if [[ "${GITHUB_REF}" =~ refs/tags/v(.+) ]]; then
            version="${BASH_REMATCH[1]}"
          else
            version="0.8.0"
          fi
          echo "app_version=$version" >> $GITHUB_OUTPUT
          echo "Version: $version"

      - name: Extract Changelog for Current Version
        id: extract_changelog
        shell: bash
        run: |
          version="${{ steps.get_version.outputs.app_version }}"
          changelogContent=$(cat CHANGELOG.md)
          pattern="## \[$version\].*?(## \[|$)"
          if [[ $changelogContent =~ $pattern ]]; then
            versionChangelog="${BASH_REMATCH[0]}"
            versionChangelog=$(echo "$versionChangelog" | sed "/## \[(?!$version\]).*/,$ d")
            versionChangelog=$(echo "$versionChangelog" | xargs)
            echo "changelog<<_CHANGELOG_DELIMITER_" >> $GITHUB_OUTPUT
            echo "$versionChangelog" >> $GITHUB_OUTPUT
            echo "_CHANGELOG_DELIMITER_" >> $GITHUB_OUTPUT
            echo "Changelog für Version $version gefunden und extrahiert"
          else
            echo "No Changelog-Entries for this version $version found"
            echo "changelog=No detailed Change found" >> $GITHUB_OUTPUT
          }

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/release/*
          name: SC Griefing Counter v${{ steps.get_version.outputs.app_version }}
          body: |
            # Release v${{ steps.get_version.outputs.app_version }}
            
            ## Changes
            ${{ steps.extract_changelog.outputs.changelog }}
            
            ## Downloads
            - **Linux AppImage/Deb:** (siehe unten)
            - **Backend Standalone:** (siehe unten)
            - **Quellcode:** Automatisch von GitHub bereitgestellt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}