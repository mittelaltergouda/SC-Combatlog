name: Build und Release Star Citizen Griefing Counter

on:
  push:
    tags:
      - 'v*' # Wird ausgelöst, wenn ein Tag mit 'v' beginnt (z.B. v1.0.0)
  workflow_dispatch: # Ermöglicht manuelles Auslösen

# Berechtigungen für den Workflow explizit setzen
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      # Checkout Code manuell ausführen statt actions/checkout zu verwenden
      - name: Checkout Code
        run: |
          git init
          git remote add origin https://github.com/${{ github.repository }}.git
          git fetch --no-tags --prune --progress --depth=1 origin
          git checkout main
          
      - name: Debug Info
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
      
      # Python manuell einrichten statt actions/setup-python zu verwenden
      - name: Set up Python 3.11
        run: |
          echo "Verwende das installierte Python auf dem Runner"
          python --version
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka pyarmor requests packaging
          pip install watchdog tkcalendar
      
      - name: Extract Version from Tag
        id: get_version
        shell: pwsh
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/v")) {
            $version = "${{ github.ref }}".Replace('refs/tags/v', '')
          } else {
            $version = "0.7.0"  # Fallback-Version
          }
          echo "VERSION=$version" >> $env:GITHUB_ENV
          echo "Extrahierte Version: $version"
          
      - name: Debug Environment Variables
        run: |
          echo "VERSION: ${{ env.VERSION }}"
          echo "GITHUB_REF: ${{ github.ref }}"
      
      - name: Create version.json
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $versionJson = @{
            latest_version = "$version"
            download_url = "https://${{ github.repository_owner }}.github.io/SC-Griefing-Counter-Releases/griefing_counter.exe"
            release_date = (Get-Date -Format "yyyy-MM-dd")
            changelog = "Neue Version $version verfügbar. Siehe GitHub für Details."
          } | ConvertTo-Json
          $versionJson | Out-File -FilePath version.json -Encoding utf8
          Get-Content version.json
      
      - name: Apply PyArmor to Main Script
        run: |
          mkdir -p dist/obfuscated
          pyarmor obfuscate --restrict 0 --output dist/obfuscated griefing_counter_tk.py
          xcopy /E /Y *.py dist\obfuscated\
          del dist\obfuscated\griefing_counter_tk.py
          copy dist\obfuscated\pytransform\__init__.py dist\obfuscated\
          rmdir /S /Q dist\obfuscated\pytransform
      
      - name: Compile Main Program with Nuitka
        run: |
          python -m nuitka --standalone --mingw64 --plugin-enable=tk-inter --windows-disable-console --include-package=tkinter --include-package=tkcalendar --output-dir=dist dist/obfuscated/griefing_counter_tk.py
          Rename-Item -Path "dist/griefing_counter_tk.dist" -NewName "griefing_counter"
          Rename-Item -Path "dist/griefing_counter/griefing_counter_tk.exe" -NewName "griefing_counter.exe"
      
      - name: Compile Updater with Nuitka
        run: |
          python -m nuitka --standalone --mingw64 --windows-disable-console --output-dir=dist gc-updater.py
      
      - name: Generate SHA256 Hash
        shell: pwsh
        run: |
          $exePath = "dist/griefing_counter/griefing_counter.exe"
          $hash = (Get-FileHash -Path $exePath -Algorithm SHA256).Hash.ToLower()
          $hash | Out-File -FilePath "dist/griefing_counter.exe.sha256" -Encoding utf8 -NoNewline
      
      - name: Copy Additional Files to Distribution
        run: |
          copy README.md dist\griefing_counter\
          copy LICENSE.txt dist\griefing_counter\
          copy CONTRIBUTING.md dist\griefing_counter\
          copy version.json dist\griefing_counter\
          copy dist\gc-updater.dist\gc-updater.exe dist\griefing_counter\
      
      - name: Create Release ZIP
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          Compress-Archive -Path dist/griefing_counter/* -DestinationPath "SC-Griefing-Counter-$version.zip"
      
      # GitHub Release manuell erstellen statt softprops/action-gh-release zu verwenden
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        shell: pwsh
        run: |
          $version = "${{ env.VERSION }}"
          $tag = "${{ github.ref_name }}"
          $token = "${{ secrets.GITHUB_TOKEN }}"
          $repoUrl = "https://api.github.com/repos/${{ github.repository }}"
          
          # Release erstellen
          $releaseData = @{
            tag_name = $tag
            name = "SC Griefing Counter v$version"
            body = "Star Citizen Griefing Counter v$version"
            draft = $false
            prerelease = $false
          } | ConvertTo-Json
          
          $headers = @{
            Authorization = "token $token"
            Accept = "application/vnd.github.v3+json"
          }
          
          # API-Aufruf zum Erstellen des Releases
          $response = Invoke-RestMethod -Uri "$repoUrl/releases" -Method Post -Headers $headers -Body $releaseData
          $releaseId = $response.id
          
          # Dateien hochladen
          $filesToUpload = @(
            @{Path = "SC-Griefing-Counter-$version.zip"; Name = "SC-Griefing-Counter-$version.zip"; ContentType = "application/zip"},
            @{Path = "dist/griefing_counter.exe.sha256"; Name = "griefing_counter.exe.sha256"; ContentType = "text/plain"},
            @{Path = "version.json"; Name = "version.json"; ContentType = "application/json"}
          )
          
          foreach ($file in $filesToUpload) {
            $uploadUrl = "$repoUrl/releases/$releaseId/assets?name=$($file.Name)"
            Invoke-RestMethod -Uri $uploadUrl -Method Post -Headers $headers -InFile $file.Path -ContentType $file.ContentType
          }
          
      - name: Deploy to GitHub Pages Repository
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Erstelle einen temporären Ordner für das Releases Repository
          mkdir -p gh-pages-deploy
          cd gh-pages-deploy
          
          # Kopiere die benötigten Dateien
          cp -r "../dist/griefing_counter/griefing_counter.exe" .
          cp -r "../dist/griefing_counter.exe.sha256" .
          cp -r "../version.json" .
          cp -r "../README.md" .
          cp -r "../LICENSE.txt" .
          cp -r "../CONTRIBUTING.md" .
          cp -r "../dist/griefing_counter/gc-updater.exe" .
          
          # Erstelle einen einfachen Index für GitHub Pages
          echo "<html><head><title>SC Griefing Counter Downloads</title></head><body>" > index.html
          echo "<h1>SC Griefing Counter Downloads</h1>" >> index.html
          echo "<p>Version: ${{ env.VERSION }}</p>" >> index.html
          echo "<p><a href='griefing_counter.exe'>Download Application</a></p>" >> index.html
          echo "<p><a href='version.json'>Version Info</a></p>" >> index.html
          echo "</body></html>" >> index.html
          
          # GitHub Pages löschen und neu erstellen
          rm -rf .git
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update auf Version ${{ env.VERSION }}"
          git push -f https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/SC-Griefing-Counter-Releases.git HEAD:gh-pages