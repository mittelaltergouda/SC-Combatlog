name: Build und Release Star Citizen Griefing Counter

on:
  push:
    tags:
      - 'v*' # Wird ausgelöst, wenn ein Tag mit 'v' beginnt (z.B. v1.0.0)
  workflow_dispatch: # Ermöglicht manuelles Auslösen

# Berechtigungen für den Workflow explizit setzen
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: windows-latest
    
    steps:
      # Wir verwenden die checkout-Action, die immer erlaubt ist
      - uses: actions/checkout@v3
      
      - name: Debug Info
        run: |
          echo "GitHub Ref: ${{ github.ref }}"
          echo "Repository Owner: ${{ github.repository_owner }}"
          echo "Actor: ${{ github.actor }}"
      
      # Wir verwenden setup-python, die immer erlaubt ist
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install nuitka requests packaging
          pip install watchdog tkcalendar
          pip install pyarmor  # Neueste Version statt 6.7.4
          pip install pyinstaller  # PyInstaller gleich installieren für einfacheren Fallback
      
      - name: Extract Version from Tag
        id: get_version
        shell: pwsh
        run: |
          if ("${{ github.ref }}".StartsWith("refs/tags/v")) {
            $version = "${{ github.ref }}".Replace('refs/tags/v', '')
          } else {
            $version = "0.7.0"  # Fallback-Version
          }
          # Speichere Version als Output-Variable
          echo "app_version=$version" >> $env:GITHUB_OUTPUT
          # Zeige Version im Log
          echo "Extrahierte Version: $version"
          
      - name: Debug Version Variable
        run: |
          echo "VERSION: ${{ steps.get_version.outputs.app_version }}"
          echo "GITHUB_REF: ${{ github.ref }}"
      
      - name: Create version.json
        id: create_version_json
        shell: pwsh
        run: |
          # Verwende die Version aus dem vorherigen Schritt
          $versionNum = "${{ steps.get_version.outputs.app_version }}"
          $versionJson = @{
            latest_version = $versionNum
            download_url = "https://${{ github.repository_owner }}.github.io/SC-Griefing-Counter-Releases/griefing_counter.exe"
            release_date = (Get-Date -Format "yyyy-MM-dd")
            changelog = "Neue Version $versionNum verfügbar. Siehe GitHub für Details."
          } | ConvertTo-Json
          $versionJson | Out-File -FilePath version.json -Encoding utf8
          Get-Content version.json
      
      - name: Apply PyArmor to Main Script
        continue-on-error: true # Erlaube Fehler bei PyArmor
        id: pyarmor_step
        run: |
          # Erstelle Verzeichnisstruktur
          mkdir -p dist/obfuscated
          
          # Direkt zum Fallback übergehen, da PyArmor Python 3.11+ nicht unterstützt
          Write-Warning "Python 3.11+ wird von PyArmor nicht unterstützt, verwende Original-Dateien"
          Copy-Item "griefing_counter_tk.py" -Destination "dist/obfuscated/" -Force
          # Kopiere auch alle anderen Python-Dateien
          Get-ChildItem -Path "*.py" -Exclude "griefing_counter_tk.py" | Copy-Item -Destination "dist/obfuscated" -Force
          
          # Vergewissere dich, dass die Datei wirklich existiert
          if (Test-Path "dist/obfuscated/griefing_counter_tk.py") {
            Write-Host "Obfuskierte Datei oder Fallback existiert."
            # Neue GitHub Actions Syntax für Output-Variablen
            echo "obfuscated_file_exists=true" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "Kritischer Fehler: dist/obfuscated/griefing_counter_tk.py existiert nicht!"
            exit 1
          }
      
      - name: Compile Main Program with PyInstaller
        run: |
          # Da Nuitka in der Pipeline Probleme mit dem GCC-Compiler hat,
          # verwenden wir stattdessen direkt PyInstaller
          Write-Host "Überspringe Nuitka wegen GCC-Compiler-Problemen, verwende direkt PyInstaller..."
          
          # Vergewissere dich, dass die Quelldatei existiert
          if (-not (Test-Path "dist/obfuscated/griefing_counter_tk.py")) {
            Write-Warning "Quelldatei dist/obfuscated/griefing_counter_tk.py nicht gefunden. Verwende die Original-Datei."
            Copy-Item "griefing_counter_tk.py" -Destination "dist/obfuscated/" -Force
          }
          
          # Erstelle das Zielverzeichnis
          if (-not (Test-Path "dist/griefing_counter")) {
            mkdir -p "dist/griefing_counter"
          }
          
          # Kompiliere mit PyInstaller
          Write-Host "Kompiliere mit PyInstaller..."
          pyinstaller --onefile --windowed --name griefing_counter --distpath dist/griefing_counter dist/obfuscated/griefing_counter_tk.py
          
          # Prüfe, ob PyInstaller erfolgreich war
          if (-not (Test-Path "dist/griefing_counter/griefing_counter.exe")) {
            Write-Error "Kritischer Fehler: PyInstaller konnte kein Build erstellen!"
            exit 1
          } else {
            Write-Host "PyInstaller-Kompilierung erfolgreich abgeschlossen."
          }
      
      - name: Compile Updater with Nuitka
        run: |
          python -m nuitka --standalone --mingw64 --windows-disable-console --output-dir=dist gc-updater.py
      
      - name: Generate SHA256 Hash
        shell: pwsh
        run: |
          $exePath = "dist/griefing_counter/griefing_counter.exe"
          if (Test-Path $exePath) {
            $hash = (Get-FileHash -Path $exePath -Algorithm SHA256).Hash.ToLower()
            $hash | Out-File -FilePath "dist/griefing_counter.exe.sha256" -Encoding utf8 -NoNewline
          } else {
            Write-Error "Die Datei $exePath wurde nicht gefunden!"
            exit 1
          }
      
      - name: Copy Additional Files to Distribution
        run: |
          # Stelle sicher, dass die Zielverzeichnisse existieren
          if (!(Test-Path "dist/griefing_counter")) {
            mkdir -p dist/griefing_counter
          }
          
          # Kopiere Dateien mit Fehlerbehandlung
          $filesToCopy = @("README.md", "LICENSE.txt", "CONTRIBUTING.md", "version.json")
          foreach ($file in $filesToCopy) {
            if (Test-Path $file) {
              Copy-Item $file -Destination "dist/griefing_counter/" -Force
            } else {
              Write-Warning "Warnung: Datei $file nicht gefunden, wird übersprungen"
            }
          }
          
          # Kopiere updater.exe, wenn vorhanden
          if (Test-Path "dist/gc-updater.dist/gc-updater.exe") {
            Copy-Item "dist/gc-updater.dist/gc-updater.exe" -Destination "dist/griefing_counter/" -Force
          } else {
            Write-Warning "Warnung: gc-updater.exe nicht gefunden"
          }
      
      - name: Create Release ZIP
        id: create_zip
        shell: pwsh
        run: |
          # Hole die Version aus dem get_version-Schritt
          $versionNum = "${{ steps.get_version.outputs.app_version }}"
          # Erstelle den ZIP-Dateinamen
          $zipFilename = "SC-Griefing-Counter-" + $versionNum + ".zip"
          
          # Prüfe, ob das Verzeichnis existiert
          if (Test-Path "dist/griefing_counter") {
            # Erstelle die ZIP-Datei
            Compress-Archive -Path dist/griefing_counter/* -DestinationPath $zipFilename -Force
            # Speichere den Dateinamen als Output
            echo "zip_filename=$zipFilename" >> $env:GITHUB_OUTPUT
          } else {
            Write-Error "Das Verzeichnis dist/griefing_counter wurde nicht gefunden!"
            exit 1
          }
      
      # GitHub Release erstellen
      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ steps.create_zip.outputs.zip_filename }}
            dist/griefing_counter.exe.sha256
            version.json
          name: SC Griefing Counter v${{ steps.get_version.outputs.app_version }}
          body: |
            # Release v${{ steps.get_version.outputs.app_version }}
            
            ## Änderungen
            - Automatisierter Build-Prozess
            - Updates können direkt in der App installiert werden
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      # Alternative Methode für GitHub Pages
      - name: Create index.html file
        shell: pwsh
        run: |
          # Erstelle Verzeichnis
          New-Item -ItemType Directory -Path "pages-content" -Force
          
          # HTML-Inhalt als separate Zeilen, um YAML-Probleme zu vermeiden
          $lines = @(
            "<!DOCTYPE html>",
            "<html>",
            "<head>",
            "    <title>SC Griefing Counter Downloads</title>",
            "    <meta charset='utf-8'>",
            "    <meta name='viewport' content='width=device-width, initial-scale=1'>",
            "    <style>",
            "        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }",
            "        h1 { color: #333; }",
            "        a { color: #0066cc; text-decoration: none; }",
            "        a:hover { text-decoration: underline; }",
            "        .download-button { display: inline-block; background: #4CAF50; color: white; padding: 10px 20px; margin: 10px 0; border-radius: 4px; }",
            "    </style>",
            "</head>",
            "<body>",
            "    <h1>SC Griefing Counter Downloads</h1>",
            "    <p>Version: ${{ steps.get_version.outputs.app_version }}</p>",
            "    <p>Release-Datum: $(Get-Date -Format 'yyyy-MM-dd')</p>",
            "    <p><a href='griefing_counter.exe' class='download-button'>Download Application</a></p>",
            "    <p><a href='version.json'>Version Info</a></p>",
            "    <p><a href='https://github.com/${{ github.repository_owner }}/SC-Griefing-Counter/releases'>Alle Releases auf GitHub</a></p>",
            "</body>",
            "</html>"
          )
          
          # In Datei schreiben
          $lines | Out-File -FilePath "pages-content/index.html" -Encoding UTF8

      - name: Prepare GitHub Pages Content
        run: |
          # Kopiere Dateien mit Fehlerprüfung
          $sourceFiles = @{
            "dist/griefing_counter/griefing_counter.exe" = "pages-content/griefing_counter.exe"
            "dist/griefing_counter.exe.sha256" = "pages-content/griefing_counter.exe.sha256"
            "version.json" = "pages-content/version.json"
            "README.md" = "pages-content/README.md"
            "LICENSE.txt" = "pages-content/LICENSE.txt"
            "CONTRIBUTING.md" = "pages-content/CONTRIBUTING.md"
          }
          
          foreach ($source in $sourceFiles.Keys) {
            if (Test-Path $source) {
              Copy-Item $source -Destination $sourceFiles[$source] -Force
              Write-Host "Kopiert: $source nach $($sourceFiles[$source])"
            } else {
              Write-Warning "Warnung: $source nicht gefunden, wird übersprungen"
            }
          }
      
      - name: Deploy to GitHub Pages Repo
        if: success()
        run: |
          cd pages-content
          git init
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add .
          git commit -m "Update auf Version ${{ steps.get_version.outputs.app_version }}"
          
          # Mit Fehlerbehandlung pushen
          try {
            git push -f https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository_owner }}/SC-Griefing-Counter-Releases.git HEAD:gh-pages
            Write-Host "Erfolgreich auf GitHub Pages deployed!"
          } catch {
            Write-Error "Fehler beim Pushen zu GitHub Pages: $_"
            exit 1
          }